{"version":3,"sources":["app.min.js"],"names":["angular","module","service"],"mappings":"AAAAA,QAAQC,OAAO,YACVC,YAAQ","file":"app.min.js","sourcesContent":["angular.module('chinavis')\r\n    .service('visService', ['$http', '$q', function ($http, $q) {\r\n        return {\r\n            getData: function (url, data) {\r\n                var deferred = $q.defer();\r\n                var promise = $http({\r\n                    method: 'GET',\r\n                    url: url,\r\n                    params: data\r\n                });\r\n                promise.then(\r\n                    // 通讯成功的处理\r\n                    function (answer) {\r\n                        // 在这里可以对返回的数据集做一定的处理,再交由controller进行处理\r\n                        answer.status = true;\r\n                        deferred.resolve(answer.data);\r\n                    },\r\n                    // 通讯失败的处理\r\n                    function (error) {\r\n                        // 可以先对失败的数据集做处理，再交由controller进行处理\r\n                        error.status = false;\r\n                        deferred.reject(error);\r\n                    });\r\n                // 返回promise对象，交由controller继续处理成功、失败的业务回调\r\n                return deferred.promise;\r\n            }\r\n        }\r\n    }]);\nangular.module('chinavis')\r\n    .constant('colorMap', [\r\n        {\r\n            name: '小姐上门',\r\n            color: '#17becf'\r\n        },\r\n        {\r\n            name: '代开发票',\r\n            color: '#1f77b4'\r\n        },\r\n        {\r\n            name: '赌博麻将',\r\n            color: '#ff7f0e'\r\n        },\r\n        {\r\n            name: '办证刻章',\r\n            color: '#2ca02c'\r\n        },\r\n        {\r\n            name: '银行诈骗',\r\n            color: '#d62728'\r\n        },\r\n        {\r\n            name: '苹果诈骗',\r\n            color: '#9467bd'\r\n        },\r\n        {\r\n            name: '房地产广告',\r\n            color: '#8c564b'\r\n        },\r\n        {\r\n            name: '贷款服务',\r\n            color: '#e377c2'\r\n        },\r\n        {\r\n            name: '各类广告',\r\n            color: '#bcbd22'\r\n        },\r\n        {\r\n            name: '招聘信息',\r\n            color: '#17becf'\r\n        },\r\n        {\r\n            name: '诽谤谣言',\r\n            color: '#5878cf'\r\n        },\r\n        {\r\n            name: '中国移动',\r\n            color: '#74b0a1'\r\n        },\r\n        {\r\n            name: '收驾驶证',\r\n            color: '#b09355'\r\n        }\r\n    ]);\nangular.module('chinavis')\r\n    .factory('localStorage', ['$window', function ($window) {\r\n        return {\r\n            // 存储单个属性\r\n            set: function (key, value) {\r\n                $window.localStorage[key] = value;\r\n            },\r\n            // 读取单个属性\r\n            get: function (key) {\r\n                return $window.localStorage[key] || '';\r\n            },\r\n            // 存储对象，以JSON格式存储\r\n            setObject: function (key, value) {\r\n                $window.localStorage[key] = JSON.stringify(value);\r\n            },\r\n            // 读取对象\r\n            getObject: function (key) {\r\n                return JSON.parse($window.localStorage[key] || '{}');\r\n            }\r\n        }\r\n    }]);\nangular.module('chinavis')\r\n    .controller('situationController', ['$scope', 'localStorage', 'colorMap', 'visService', '$interval', '$filter', function ($scope, localStorage, colorMap, visService, $interval, $filter) {\r\n        $scope.colorMap = colorMap;// 分类及对应颜色\r\n\r\n        $scope.types = ['所有分类'];// 所有分类\r\n        $scope.colorMap.map(function (item) {\r\n            $scope.types.push(item.name);\r\n        });\r\n        $scope.selectedType = $scope.types[0];// 当前所选分类\r\n\r\n        $scope.currentTime = '2017-02-24 00:00:00';// 当前时间\r\n        $scope.viewTime = new Date($scope.currentTime).valueOf() - 1800000;// 回退时间\r\n        localStorage.set('startTime', (new Date($scope.currentTime).valueOf()) / 1000);// 转化为时间戳存储在localStorage\r\n        $scope.timeRange = '';\r\n\r\n        $scope.show = false;// 是否显示短信内容\r\n        $scope.close = function () {\r\n            $scope.show = false;\r\n        };// 关闭短信内容\r\n        $scope.records = [];// 短信内容\r\n\r\n        // 创建地图\r\n        var map = new AMap.Map('container', {\r\n            mapStyle: 'amap://styles/grey',\r\n            zoom: 11,\r\n            center: [116.366576, 39.921797]\r\n        });\r\n\r\n        map.setFeatures(['road', 'bg']);// 多个种类要素显示\r\n        AMapUI.load(['ui/misc/PointSimplifier', 'lib/utils', 'lib/$'], function (PointSimplifier, utils, $) {\r\n            if (!PointSimplifier.supportCanvas) {\r\n                alert('当前环境不支持 Canvas！');\r\n                return;\r\n            }\r\n            function MyCanvasRender(pointSimplifierIns, opts) {\r\n                // 直接调用父类的构造函数\r\n                MyCanvasRender.__super__.constructor.apply(this, arguments);\r\n            }\r\n\r\n            // 继承自默认的Canvas引擎（http://webapi.amap.com/ui/1.0/ui/misc/PointSimplifier/render/canvas.js）\r\n            utils.inherit(MyCanvasRender, PointSimplifier.Render.Canvas);\r\n\r\n            utils.extend(MyCanvasRender.prototype, {\r\n                renderNormalPoints: function (zoom, activePoints, shadowPoints) {\r\n                    // 先按默认逻辑处理shadowPoints\r\n                    MyCanvasRender.__super__.renderNormalPoints.call(this, zoom, null, shadowPoints);\r\n\r\n                    var pointStyle = this.getOption('pointStyle'),\r\n                        getPointsGroupKey = this.getOption('getPointsGroupKey'),\r\n                        pointStyleGroup = this.getOption('pointStyleGroup'),\r\n                        pointSimplifierIns = this.getPointSimplifierInstance(),\r\n                        groups = {};\r\n\r\n                    // 按key分组\r\n                    for (var i = 0, len = activePoints.length; i < len; i++) {\r\n\r\n                        var point = activePoints[i],\r\n                            dataIndex = point.idx,\r\n                            dataItem = pointSimplifierIns.getDataItemByIndex(dataIndex);\r\n\r\n                        var key = getPointsGroupKey.call(this, dataItem, dataIndex);\r\n\r\n                        if (!groups[key]) {\r\n                            groups[key] = [];\r\n                        }\r\n\r\n                        groups[key].push(activePoints[i]);\r\n                    }\r\n\r\n                    // 分组绘制\r\n                    for (var k in groups) {\r\n\r\n                        // 继承pointStyle中的默认属性\r\n                        var styleOptions = utils.extend({}, pointStyle, pointStyleGroup[k]);\r\n\r\n                        // 调用父类的绘制函数\r\n                        this.drawPointsWithStyleOptions(groups[k], styleOptions);\r\n                    }\r\n                }\r\n            });\r\n\r\n            var pointSimplifierIns = new PointSimplifier({\r\n                map: map, // 所属的地图实例\r\n\r\n                getPosition: function (item) {\r\n\r\n                    if (!item) {\r\n                        return null;\r\n                    }\r\n\r\n                    // 返回经纬度\r\n                    return [parseFloat(item.lng), parseFloat(item.lat)];\r\n                },\r\n                getHoverTitle: function (dataItem) {\r\n                    return dataItem.content;\r\n                },\r\n                autoSetFitView: false,\r\n                // 赋值为 MyCanvasRender\r\n                renderConstructor: MyCanvasRender,\r\n                renderOptions: {\r\n                    // 点的样式\r\n                    pointStyle: {\r\n                        width: 5,\r\n                        height: 5,\r\n                        fillStyle: '#d939bd'\r\n                    },\r\n                    // 鼠标hover时的title信息\r\n                    hoverTitleStyle: {\r\n                        position: 'top'\r\n                    },\r\n                    getPointsGroupKey: function (dataItem) {\r\n                        // 这里直接按索引取余，仅作示意\r\n                        return 'g' + dataItem.type;\r\n                    },\r\n                    // 分组配置\r\n                    pointStyleGroup: {\r\n                        'g0': {\r\n                            fillStyle: colorMap[0].color\r\n                        },\r\n                        'g1': {\r\n                            fillStyle: colorMap[1].color\r\n                        },\r\n                        'g2': {\r\n                            fillStyle: colorMap[2].color\r\n                        },\r\n                        'g3': {\r\n                            fillStyle: colorMap[3].color\r\n                        },\r\n                        'g4': {\r\n                            fillStyle: colorMap[4].color\r\n                        },\r\n                        'g5': {\r\n                            fillStyle: colorMap[5].color\r\n                        },\r\n                        'g6': {\r\n                            fillStyle: colorMap[6].color\r\n                        },\r\n                        'g7': {\r\n                            fillStyle: colorMap[7].color\r\n                        },\r\n                        'g8': {\r\n                            fillStyle: colorMap[8].color\r\n                        },\r\n                        'g9': {\r\n                            fillStyle: colorMap[9].color\r\n                        },\r\n                        'g10': {\r\n                            fillStyle: colorMap[10].color\r\n                        },\r\n                        'g11': {\r\n                            fillStyle: colorMap[11].color\r\n                        },\r\n                        'g12': {\r\n                            fillStyle: colorMap[12].color\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            pointSimplifierIns.on('pointClick', function (e, record) {\r\n                console.log(e.type, record.data.recitime);\r\n            });\r\n\r\n            // 绘制左上legendType\r\n            var legendType = echarts.init(document.getElementById(\"legendType\"));\r\n            // 绘制左上legendPhone\r\n            var legendPhone = echarts.init(document.getElementById(\"legendPhone\"));\r\n            // 绘制下方时间线\r\n            var areaStack = echarts.init(document.getElementById(\"area-stack\"));\r\n\r\n            // 初始化数据\r\n            visService.getData('data/First-day.json', {}).then(\r\n                function (data) {\r\n                    // 初始化时间\r\n                    $scope.timeRange = '当前时间：' + $filter('date')(data.areas[data.areas.length - 1].stime, 'yyyy年M月d日')\r\n                        + $filter('date')(data.areas[data.areas.length - 1].stime, ' HH:mm ')\r\n                        + \"至\" + $filter('date')(data.areas[data.areas.length - 1].etime, ' HH:mm');\r\n\r\n                    // 初始化地图数据\r\n                    pointSimplifierIns.setData(data.maps);\r\n\r\n                    // 初始化legendType数据\r\n                    legendType.setOption({\r\n                        grid: {\r\n                            left: 5,\r\n                            right: 30,\r\n                            top: 10,\r\n                            bottom: 0,\r\n                            containLabel: true\r\n                        },\r\n                        xAxis: {\r\n                            show: false\r\n                        },\r\n                        yAxis: {\r\n                            type: 'category',\r\n                            boundaryGap: false,\r\n                            axisLabel: {\r\n                                textStyle: {\r\n                                    color: function () {\r\n                                        return (colorMap[0]).color\r\n                                    }\r\n                                }\r\n                            },\r\n                            data: colorMap.map(function (d) {\r\n                                return d.name;\r\n                            })\r\n                        },\r\n                        series: [\r\n                            {\r\n                                type: 'bar',\r\n                                barMaxWidth: 20,\r\n                                itemStyle: {\r\n                                    normal: {\r\n                                        color: function (params) {\r\n                                            return (colorMap[params.dataIndex]).color\r\n                                        }\r\n                                    }\r\n                                },\r\n                                label: {\r\n                                    normal: {\r\n                                        show: true,\r\n                                        position: 'right'\r\n                                    }\r\n                                },\r\n                                data: data.bars\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                    // 初始化legendPhone数据\r\n                    legendPhone.setOption({\r\n                        tooltip: {\r\n                            trigger: 'item',\r\n                            formatter: \"{c} ({d}%)\"\r\n                        },\r\n                        series: [\r\n                            {\r\n                                type: 'pie',\r\n                                radius: '55%',\r\n                                center: ['50%', '60%'],\r\n                                data: data.phone,\r\n                                itemStyle: {\r\n                                    emphasis: {\r\n                                        shadowBlur: 10,\r\n                                        shadowOffsetX: 0,\r\n                                        shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                    // 初始化areaStack数据\r\n                    $scope.areas = data.areas;\r\n                    areaStack.setOption({\r\n                        tooltip: {\r\n                            trigger: 'axis',\r\n                            axisPointer: {\r\n                                animation: false\r\n                            }\r\n                        },\r\n                        grid: {// 设置图与边缘的距离\r\n                            left: 0,\r\n                            right: 35,\r\n                            bottom: 5,\r\n                            containLabel: true\r\n                        },\r\n                        dataZoom: [{\r\n                            show: false,\r\n                            realtime: true,\r\n                            start: 0,\r\n                            end: 100\r\n                        }, {\r\n                            type: 'inside'\r\n                        }],\r\n                        xAxis: {\r\n                            type: 'category',\r\n                            boundaryGap: false,\r\n                            nameLocation: 'middle',\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            axisLabel: {\r\n                                textStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            axisTick: {\r\n                                lineStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            data: $scope.areas.map(function (item) {\r\n                                return $filter('date')(item.etime, 'd日HH:mm');\r\n                            })\r\n                        },\r\n                        yAxis: {\r\n                            show: false\r\n                        },\r\n                        series: [{\r\n                            name: 'num',\r\n                            type: 'line',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    width: 1\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            label: {\r\n                                normal: {\r\n                                    show: true,\r\n                                    position: 'top'\r\n                                }\r\n                            },\r\n                            data: $scope.areas.map(function (item) {\r\n                                return item.num;\r\n                            })\r\n                        }]\r\n                    });\r\n\r\n                    legendPhone.on('click', function (params) {\r\n                        if (params.componentType === 'series') {\r\n                            if (params.seriesType === 'pie') {\r\n                                var para = {\r\n                                    startTime: ($scope.viewTime) / 1000,\r\n                                    endTime: ($scope.viewTime + 1800000) / 1000,\r\n                                    type: $scope.types.indexOf($scope.selectedType) - 1,\r\n                                    phone: params.name\r\n                                };\r\n                                visService.getData('./api/content.action', para).then(\r\n                                    function (data) {\r\n                                        $scope.records = data;\r\n                                        $scope.show = true;\r\n                                    },\r\n                                    function (error) {\r\n                                        $scope.error = error;\r\n                                    });\r\n                            }\r\n                        }\r\n                    });\r\n                    legendType.on('click', function (params) {\r\n                        if (params.componentType === 'series') {\r\n                            if (params.seriesType === 'bar') {\r\n                                var type = -1;\r\n                                colorMap.map(function (d, i) {\r\n                                    if (d.name === params.name) type = i;\r\n                                });\r\n\r\n                                var para = {\r\n                                    startTime: ($scope.viewTime) / 1000,\r\n                                    endTime: ($scope.viewTime + 1800000) / 1000,\r\n                                    type: type\r\n                                };\r\n                                visService.getData('./api/content.action', para).then(\r\n                                    function (data) {\r\n                                        $scope.records = data;\r\n                                        $scope.show = true;\r\n                                    },\r\n                                    function (error) {\r\n                                        $scope.error = error;\r\n                                    });\r\n                            }\r\n                        }\r\n                    });\r\n                    areaStack.on('click', function (params) {\r\n                        if (params.componentType === 'series') {\r\n                            if (params.seriesType === 'line') {\r\n                                if (params.dataType === 'edge') {\r\n                                    // 点击到了 graph 的 edge（边）上\r\n                                }\r\n                                else {\r\n                                    // 点击到了 graph 的 node（节点）上\r\n                                    var time = new Date(\"2017-02-\" + params.name.substring(0, 2) + \" \" + params.name.substring(3, 8) + \":00\");\r\n\r\n                                    // 重置content数据\r\n                                    $scope.viewTime = time.getTime() - 1800000;\r\n                                    $scope.show = false;\r\n                                    $scope.records = [];\r\n\r\n                                    var para = {\r\n                                        startTime: (time.getTime() - 1800000) / 1000,\r\n                                        endTime: (time.getTime()) / 1000,\r\n                                        type: $scope.types.indexOf($scope.selectedType) - 1\r\n                                    };\r\n                                    visService.getData('./api/position.action', para).then(\r\n                                        function (data) {\r\n                                            // 更新地图数据\r\n                                            pointSimplifierIns.setData(data.maps);\r\n\r\n                                            // 更新时间\r\n                                            $scope.timeRange = '当前时间：' + $filter('date')(data.area.stime, 'yyyy年M月d日')\r\n                                                + $filter('date')(data.area.stime, ' HH:mm ')\r\n                                                + \"至\" + $filter('date')(data.area.etime, ' HH:mm');\r\n\r\n                                            // 更新左上legendType数据\r\n                                            legendType.setOption({\r\n                                                series: [{\r\n                                                    data: data.bars\r\n                                                }]\r\n                                            });\r\n                                            // 更新左上legendPhone数据\r\n                                            legendPhone.setOption({\r\n                                                series: [\r\n                                                    {\r\n                                                        data: data.phone\r\n                                                    }\r\n                                                ]\r\n                                            });\r\n                                        },\r\n                                        function (error) {\r\n                                            $scope.error = error;\r\n                                        });\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                function (error) {\r\n                    $scope.error = error;\r\n                });\r\n\r\n            // 开始按钮点击事件\r\n            $scope.start = function () {\r\n                $scope.intervalEvent = $interval(function () {\r\n                    // 自定义时间\r\n                    if (parseInt(localStorage.get('startTime')) !== (new Date($scope.currentTime).valueOf()) / 1000) {\r\n                        localStorage.set('startTime', (new Date($scope.currentTime).valueOf()) / 1000);\r\n                        // 清除下方时间线数据\r\n                        $scope.areas = [];\r\n                        areaStack.setOption({\r\n                            xAxis: {\r\n                                data: $scope.areas.map(function (item) {\r\n                                    return $filter('date')(item.etime, 'd日HH:mm');\r\n                                })\r\n                            },\r\n                            series: [{\r\n                                data: $scope.areas.map(function (item) {\r\n                                    return item.num;\r\n                                })\r\n                            }]\r\n                        });\r\n                    }\r\n\r\n                    var para = {\r\n                        startTime: parseInt(localStorage.get('startTime')),\r\n                        endTime: parseInt(localStorage.get('startTime')) + 1800,\r\n                        type: $scope.types.indexOf($scope.selectedType) - 1\r\n                    };\r\n                    visService.getData('./api/position.action', para).then(\r\n                        function (data) {\r\n                            // 更新地图数据\r\n                            pointSimplifierIns.setData(data.maps);\r\n\r\n                            // 更新时间\r\n                            $scope.timeRange = '当前时间：' + $filter('date')(data.area.stime, 'yyyy年M月d日')\r\n                                + $filter('date')(data.area.stime, 'HH:mm')\r\n                                + \"至\" + $filter('date')(data.area.etime, 'HH:mm');\r\n\r\n                            // 更新左上legendType数据\r\n                            legendType.setOption({\r\n                                series: [{\r\n                                    data: data.bars\r\n                                }]\r\n                            });\r\n                            // 更新左上legendPhone数据\r\n                            legendPhone.setOption({\r\n                                series: [\r\n                                    {\r\n                                        data: data.phone\r\n                                    }\r\n                                ]\r\n                            });\r\n\r\n                            // 更新下方时间线数据\r\n                            $scope.areas.push(data.area);\r\n                            // 保留最近一天的数据\r\n                            if ($scope.areas.length > 48) $scope.areas.shift();\r\n\r\n                            areaStack.setOption({\r\n                                xAxis: {\r\n                                    data: $scope.areas.map(function (item) {\r\n                                        return $filter('date')(item.etime, 'd日HH:mm');\r\n                                    })\r\n                                },\r\n                                series: [{\r\n                                    data: $scope.areas.map(function (item) {\r\n                                        return item.num;\r\n                                    })\r\n                                }]\r\n                            });\r\n                        },\r\n                        function (error) {\r\n                            $scope.error = error;\r\n                        });\r\n\r\n                    // 重置content数据\r\n                    $scope.viewTime = parseInt(localStorage.get('startTime') * 1000);\r\n                    $scope.show = false;\r\n                    $scope.records = [];\r\n\r\n                    localStorage.set('startTime', parseInt(localStorage.get('startTime')) + 1800);\r\n                    $scope.currentTime = $filter('date')(localStorage.get('startTime') + '000', 'yyyy-MM-dd HH:mm:ss');\r\n\r\n                }, 10000);\r\n            };\r\n\r\n            $scope.flag = '开始';\r\n            $scope.stop = function (flag) {\r\n                if (flag === '暂停') {\r\n                    $interval.cancel($scope.intervalEvent);\r\n                    $scope.flag = '开始';\r\n                } else {\r\n                    $scope.start(localStorage.get('startTime'));\r\n                    $scope.flag = '暂停';\r\n\r\n                    // 重置content数据\r\n                    $scope.show = false;\r\n                    $scope.records = [];\r\n                }\r\n            };\r\n        });\r\n    }]);\nangular.module('chinavis')\r\n    .controller('analysisController', ['$scope', 'colorMap', 'visService', '$interval', '$filter', function ($scope, colorMap, visService, $interval, $filter) {\r\n        $scope.months = [\r\n            {\r\n                \"name\": \"二月\",\r\n                \"url\": \"data/M2-30min.json\"\r\n            },\r\n            {\r\n                \"name\": \"三月\",\r\n                \"url\": \"data/M3-30min.json\"\r\n            },\r\n            {\r\n                \"name\": \"四月\",\r\n                \"url\": \"data/M4-30min.json\"\r\n            }\r\n        ];\r\n        $scope.currentMonth = \"二月\";\r\n\r\n        // 初始展示二月份数据\r\n        visService.getData($scope.months[0].url, {}).then(\r\n            function (data) {\r\n                $scope.data0 = data;\r\n            },\r\n            function (error) {\r\n                $scope.error = error;\r\n            });\r\n\r\n        $scope.show = function (index) {\r\n            visService.getData($scope.months[index].url, {}).then(\r\n                function (data) {\r\n                    $scope.currentMonth = data.name;\r\n                    if (index === 0) {\r\n                        $scope.data0 = data;\r\n                        $scope.data1 = null;\r\n                        $scope.data2 = null;\r\n                    } else if (index === 1) {\r\n                        $scope.data0 = null;\r\n                        $scope.data1 = data;\r\n                        $scope.data2 = null;\r\n                    } else if (index === 2) {\r\n                        $scope.data0 = null;\r\n                        $scope.data1 = null;\r\n                        $scope.data2 = data;\r\n                    }\r\n                },\r\n                function (error) {\r\n                    $scope.error = error;\r\n                });\r\n        }\r\n    }]);\nangular.module('chinavis')\r\n    .directive('areaChart', ['$filter', 'colorMap', function ($filter, colorMap) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                data: '='\r\n            },\r\n            template: '<div></div>',\r\n            link: function (scope, element) {\r\n                var chart = element.find('div')[0];\r\n                chart.style.height = '249px';\r\n                chart.style.width = '100%';\r\n\r\n                var Chart = echarts.init(chart);\r\n                Chart.setOption({\r\n                    title: {\r\n                        text: scope.data.name,\r\n                        textStyle: {\r\n                            color: '#aaaaaa',\r\n                            fontSize: 15\r\n                        },\r\n                        top: 15,\r\n                        left: 40\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {\r\n                            type: 'cross',\r\n                            lineStyle: {\r\n                                type: 'dashed',\r\n                                width: 1\r\n                            },\r\n                            label: {\r\n                                backgroundColor: '#6a7985'\r\n                            }\r\n                        },\r\n                        position: {\r\n                            right: 10,\r\n                            top: 10\r\n                        }\r\n                    },\r\n                    grid: {\r\n                        left: '1%',\r\n                        right: '2%',\r\n                        bottom: '1%',\r\n                        containLabel: true\r\n                    },// 设置图与边缘的距离\r\n                    dataZoom: [{\r\n                        show: false,\r\n                        realtime: true,\r\n                        start: 0,\r\n                        end: 50\r\n                    }, {\r\n                        type: 'inside'\r\n                    }],\r\n                    color: colorMap.map(function (item) {\r\n                        return item.color\r\n                    }),// 改变legend的颜色\r\n                    legend: {\r\n                        top: 15,\r\n                        data: colorMap.map(function (item) {\r\n                            var obj = {};\r\n                            obj.name = item.name;\r\n                            obj.textStyle = {color: item.color};\r\n                            return obj;\r\n                        })\r\n                    },\r\n                    xAxis: {\r\n                        type: 'category',\r\n                        boundaryGap: false,\r\n                        axisLine: {\r\n                            onZero: true,\r\n                            lineStyle: {\r\n                                color: '#aaaaaa'\r\n                            }\r\n                        },\r\n                        axisLabel: {\r\n                            textStyle: {\r\n                                color: '#aaaaaa'\r\n                            }\r\n                        },\r\n                        axisTick: {\r\n                            lineStyle: {\r\n                                color: '#aaaaaa'\r\n                            }\r\n                        },\r\n                        data: scope.data.value.map(function (item) {\r\n                            return $filter('date')(item.time, 'M月d日H时mm分');\r\n                        })\r\n                    },\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        splitLine: {\r\n                            show: false\r\n                        },// 去除网格线\r\n                        splitArea: {\r\n                            show: false\r\n                        },// 保留网格区域\r\n                        axisLine: {\r\n                            lineStyle: {\r\n                                color: '#aaaaaa'\r\n                            }\r\n                        },\r\n                        axisLabel: {\r\n                            textStyle: {\r\n                                color: '#aaaaaa'\r\n                            }\r\n                        },\r\n                        axisTick: {\r\n                            lineStyle: {\r\n                                color: '#aaaaaa'\r\n                            }\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: colorMap[0].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[0].color\r\n                                }\r\n                            },\r\n                            smooth: true,\r\n                            smoothMonotone: 'x',\r\n                            symbolSize: 0,\r\n                            showSymbol: false,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g0 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[1].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[1].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g1 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[2].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[2].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g1 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[3].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[3].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g3 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[4].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[4].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g4 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[5].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[5].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g5 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[6].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[6].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g6 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[7].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[7].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g7 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[8].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[8].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g8 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[9].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[9].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g9 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[10].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[10].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g10 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[11].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[11].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g11 || 0;\r\n                            })\r\n                        }, {\r\n                            name: colorMap[12].name,\r\n                            type: 'line',\r\n                            stack: '总量',\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    opacity: 0\r\n                                }\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: colorMap[12].color\r\n                                }\r\n                            },\r\n                            symbolSize: 3,\r\n                            hoverAnimation: false,\r\n                            data: scope.data.value.map(function (item) {\r\n                                return item.g12 || 0;\r\n                            })\r\n                        }]\r\n                });\r\n            }\r\n        }\r\n    }]);\nangular.module('chinavis')\r\n    .directive('barChart', ['$filter', 'colorMap', function ($filter, colorMap) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                data: '=',\r\n                type: '='\r\n            },\r\n            template: '<div></div>',\r\n            link: function (scope, element) {\r\n                var title = ['各时间段伪基站活跃情况', '各类短信数量对比'];\r\n\r\n                var chart = element.find('div')[0];\r\n                chart.style.height = '230px';\r\n                chart.style.width = '100%';\r\n\r\n                var Chart = echarts.init(chart);\r\n                Chart.setOption({\r\n                    title: {\r\n                        text: title[scope.type],\r\n                        textStyle: {\r\n                            color: '#aaaaaa',\r\n                            fontSize: 15\r\n                        },\r\n                        top: 15,\r\n                        left: 40\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {// 坐标轴指示器，坐标轴触发有效\r\n                            type: 'shadow'// 默认为直线，可选为：'line' | 'shadow'\r\n                        }\r\n                    },\r\n                    grid: {\r\n                        left: '1%',\r\n                        right: '2%',\r\n                        bottom: '1%',\r\n                        containLabel: true\r\n                    },// 设置图与边缘的距离\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisLine: {\r\n                                onZero: true,\r\n                                lineStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            axisLabel: {\r\n                                show: true,\r\n                                interval: 0,\r\n                                textStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            axisTick: {\r\n                                lineStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            data: scope.data.map(function (item) {\r\n                                if (scope.type === 0) return $filter('date')(item.time, 'HH:mm');\r\n                                else if (scope.type === 1) return colorMap[item.type].name;\r\n                            })\r\n                        }\r\n                    ],\r\n                    yAxis: [\r\n                        {\r\n                            type: 'value',\r\n                            splitLine: {\r\n                                show: false\r\n                            },// 去除网格线\r\n                            splitArea: {\r\n                                show: false\r\n                            },// 保留网格区域\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            axisLabel: {\r\n                                textStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            },\r\n                            axisTick: {\r\n                                lineStyle: {\r\n                                    color: '#aaaaaa'\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: '总量',\r\n                            type: 'bar',\r\n                            barWidth: '60%',\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: function (params) {\r\n                                        if (scope.type === 0) return '#3398DB';\r\n                                        else if (scope.type === 1) return (colorMap[params.dataIndex]).color\r\n                                    }\r\n                                }\r\n                            },\r\n                            data: scope.data.map(function (item) {\r\n                                return item.num\r\n                            })\r\n                        }\r\n                    ]\r\n                });\r\n\r\n            }\r\n        }\r\n    }]);\nangular.module('chinavis')\r\n    .directive('pieChart', ['$filter', 'colorMap', function ($filter, colorMap) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                data: '='\r\n            },\r\n            template: '<div></div>',\r\n            link: function (scope, element) {\r\n                var pieData = [];\r\n                // 修改key并添加颜色信息\r\n                scope.data.second.map(function (item) {\r\n                    var obj = {};\r\n                    obj.name = colorMap[item.type].name;\r\n                    obj.value = item.num;\r\n                    obj.itemStyle = {\"normal\": {\"color\": colorMap[item.type].color}};\r\n                    pieData.push(obj);\r\n                });\r\n\r\n                var chart = element.find('div')[0];\r\n                chart.style.height = '490px';\r\n                chart.style.width = '100%';\r\n\r\n                var Chart = echarts.init(chart);\r\n                Chart.setOption({\r\n                    title: {\r\n                        text: '各类短信所占比例',\r\n                        x: 'center',\r\n                        bottom: 30,\r\n                        textStyle: {\r\n                            color: '#aaaaaa',\r\n                            fontSize: 15\r\n                        }\r\n                    },\r\n                    grid: {\r\n                        left: '2%',\r\n                        right: '2%',\r\n                        top: '2%',\r\n                        containLabel: true\r\n                    },// 设置图与边缘的距离\r\n                    tooltip: {\r\n                        trigger: 'item',\r\n                        formatter: \"{b}: {c} ({d}%)\"\r\n                    },\r\n                    series: [\r\n                        {\r\n                            type: 'pie',\r\n                            selectedMode: 'single',\r\n                            radius: [0, '30%'],\r\n\r\n                            label: {\r\n                                normal: {\r\n                                    position: 'inner'\r\n                                }\r\n                            },\r\n                            labelLine: {\r\n                                normal: {\r\n                                    show: false\r\n                                }\r\n                            },\r\n                            data: scope.data.first\r\n                        },\r\n                        {\r\n                            name: '访问来源',\r\n                            type: 'pie',\r\n                            radius: ['40%', '55%'],\r\n\r\n                            data: pieData\r\n                        }\r\n                    ]\r\n                });\r\n\r\n            }\r\n        }\r\n    }]);"]}