{"version":3,"sources":["app.min.js"],"names":["angular","module"],"mappings":"AAAAA,QAAQC,OAAO,YAAa,YAAa","file":"app.min.js","sourcesContent":["angular.module('chinavis', ['ngAnimate', 'ui.router'])\n    .config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\n        $stateProvider\n            .state('situation', {\n                url: '/',\n                templateUrl: './Situation/situation.html',\n                controller: 'situationController'\n            })\n            .state('analysis', {\n                url: '/analysis',\n                templateUrl: './Analysis/analysis.html',\n                controller: 'analysisController'\n            });\n        $urlRouterProvider.otherwise('/');\n    }]);\nangular.module('chinavis')\n    .service('visService', ['$http', '$q', function ($http, $q) {\n        return {\n            getData: function (url, data) {\n                var deferred = $q.defer();\n                var promise = $http({\n                    method: 'GET',\n                    url: url,\n                    params: data\n                });\n                promise.then(\n                    // 通讯成功的处理\n                    function (answer) {\n                        // 在这里可以对返回的数据集做一定的处理,再交由controller进行处理\n                        answer.status = true;\n                        deferred.resolve(answer.data);\n                    },\n                    // 通讯失败的处理\n                    function (error) {\n                        // 可以先对失败的数据集做处理，再交由controller进行处理\n                        error.status = false;\n                        deferred.reject(error);\n                    });\n                // 返回promise对象，交由controller继续处理成功、失败的业务回调\n                return deferred.promise;\n            }\n        }\n    }]);\nangular.module('chinavis')\n    .constant('colorMap', [\n        {\n            name: '小姐上门',\n            color: '#17becf'\n        },\n        {\n            name: '代开发票',\n            color: '#1f77b4'\n        },\n        {\n            name: '赌博麻将',\n            color: '#ff7f0e'\n        },\n        {\n            name: '办证刻章',\n            color: '#2ca02c'\n        },\n        {\n            name: '银行诈骗',\n            color: '#d62728'\n        },\n        {\n            name: '苹果诈骗',\n            color: '#9467bd'\n        },\n        {\n            name: '房地产广告',\n            color: '#8c564b'\n        },\n        {\n            name: '贷款服务',\n            color: '#e377c2'\n        },\n        {\n            name: '各类广告',\n            color: '#bcbd22'\n        },\n        {\n            name: '招聘信息',\n            color: '#17becf'\n        },\n        {\n            name: '诽谤谣言',\n            color: '#5878cf'\n        },\n        {\n            name: '中国移动',\n            color: '#74b0a1'\n        },\n        {\n            name: '收驾驶证',\n            color: '#b09355'\n        }\n    ]);\nangular.module('chinavis')\n    .controller('situationController', ['$scope', 'colorMap', 'visService', '$interval', '$filter', function ($scope, colorMap, visService, $interval, $filter) {\n        $scope.colorMap = colorMap;// 分类及对应颜色\n        $scope.types = ['所有分类'];// 所有分类\n        $scope.colorMap.map(function (item) {\n            $scope.types.push(item.name);\n        });\n        $scope.selectedType = $scope.types[0];// 当前所选分类\n        $scope.viewTime = '';// 当前数据所属时间\n        $scope.currentTime = '2017-02-23 00:00:00';// 起始时间\n        $scope.startTime = new Date($scope.currentTime).valueOf();// 转化为时间戳\n        $scope.timeRange = '';\n\n        $scope.show = false;// 是否显示短信内容\n        $scope.close = function () {\n            $scope.show = false;\n        };// 关闭短信内容\n        $scope.records = [];// 短信内容\n\n        // 创建地图\n        var map = new AMap.Map('container', {\n            mapStyle: 'amap://styles/grey',\n            zoom: 11,\n            center: [116.366576, 39.921797]\n        });\n\n        map.setFeatures(['road', 'bg']);// 多个种类要素显示\n\n        AMapUI.load(['ui/misc/PointSimplifier', 'lib/utils', 'lib/$'], function (PointSimplifier, utils, $) {\n\n            if (!PointSimplifier.supportCanvas) {\n                alert('当前环境不支持 Canvas！');\n                return;\n            }\n\n            /**\n             * 自定义绘制引擎\n             * @param {PointSimplifier} pointSimplifierIns 关联的PointSimplifier实例\n             * @param {Object} opts   配置\n             */\n            function MyCanvasRender(pointSimplifierIns, opts) {\n                // 直接调用父类的构造函数\n                MyCanvasRender.__super__.constructor.apply(this, arguments);\n            }\n\n            // 继承自默认的Canvas引擎（http://webapi.amap.com/ui/1.0/ui/misc/PointSimplifier/render/canvas.js）\n            utils.inherit(MyCanvasRender, PointSimplifier.Render.Canvas);\n\n            utils.extend(MyCanvasRender.prototype, {\n                /**\n                 * 重新实现点的绘制方法\n                 * @param  {number} zoom       当前的地图级别\n                 * @param  {Array} activePoints 可以正常绘制的点\n                 * @param  {Array} shadowPoints 空间被占用的点\n                 */\n                renderNormalPoints: function (zoom, activePoints, shadowPoints) {\n                    // 先按默认逻辑处理shadowPoints\n                    MyCanvasRender.__super__.renderNormalPoints.call(this, zoom, null, shadowPoints);\n\n                    var pointStyle = this.getOption('pointStyle'),\n                        getPointsGroupKey = this.getOption('getPointsGroupKey'),\n                        pointStyleGroup = this.getOption('pointStyleGroup'),\n                        pointSimplifierIns = this.getPointSimplifierInstance(),\n                        groups = {};\n\n                    // 按key分组\n                    for (var i = 0, len = activePoints.length; i < len; i++) {\n\n                        var point = activePoints[i],\n                            dataIndex = point.idx,\n                            dataItem = pointSimplifierIns.getDataItemByIndex(dataIndex);\n\n                        var key = getPointsGroupKey.call(this, dataItem, dataIndex);\n\n                        if (!groups[key]) {\n                            groups[key] = [];\n                        }\n\n                        groups[key].push(activePoints[i]);\n                    }\n\n                    // 分组绘制\n                    for (var k in groups) {\n\n                        // 继承pointStyle中的默认属性\n                        var styleOptions = utils.extend({}, pointStyle, pointStyleGroup[k]);\n\n                        // 调用父类的绘制函数\n                        this.drawPointsWithStyleOptions(groups[k], styleOptions);\n                    }\n                }\n            });\n\n            var pointSimplifierIns = new PointSimplifier({\n                map: map, // 所属的地图实例\n\n                getPosition: function (item) {\n\n                    if (!item) {\n                        return null;\n                    }\n\n                    // 返回经纬度\n                    return [parseFloat(item.lng), parseFloat(item.lat)];\n                },\n                getHoverTitle: function (dataItem) {\n                    return dataItem.content;\n                },\n                autoSetFitView: false,\n                // 赋值为 MyCanvasRender\n                renderConstructor: MyCanvasRender,\n                renderOptions: {\n                    // 点的样式\n                    pointStyle: {\n                        width: 5,\n                        height: 5,\n                        fillStyle: '#d939bd'\n                    },\n                    // 鼠标hover时的title信息\n                    hoverTitleStyle: {\n                        position: 'top'\n                    },\n                    getPointsGroupKey: function (dataItem) {\n                        // 这里直接按索引取余，仅作示意\n                        return 'g' + dataItem.type;\n                    },\n                    // 分组配置\n                    pointStyleGroup: {\n                        'g0': {\n                            fillStyle: colorMap[0].color\n                        },\n                        'g1': {\n                            fillStyle: colorMap[1].color\n                        },\n                        'g2': {\n                            fillStyle: colorMap[2].color\n                        },\n                        'g3': {\n                            fillStyle: colorMap[3].color\n                        },\n                        'g4': {\n                            fillStyle: colorMap[4].color\n                        },\n                        'g5': {\n                            fillStyle: colorMap[5].color\n                        },\n                        'g6': {\n                            fillStyle: colorMap[6].color\n                        },\n                        'g7': {\n                            fillStyle: colorMap[7].color\n                        },\n                        'g8': {\n                            fillStyle: colorMap[8].color\n                        },\n                        'g9': {\n                            fillStyle: colorMap[9].color\n                        },\n                        'g10': {\n                            fillStyle: colorMap[10].color\n                        },\n                        'g11': {\n                            fillStyle: colorMap[11].color\n                        },\n                        'g12': {\n                            fillStyle: colorMap[12].color\n                        }\n                    }\n                }\n            });\n\n            pointSimplifierIns.on('pointClick', function (e, record) {\n                console.log(e.type, record.data.recitime);\n            });\n\n            // 用echarts绘制左上legendType\n            var legendType = echarts.init(document.getElementById(\"legendType\"));\n            legendType.setOption({\n                grid: {\n                    left: 5,\n                    right: 30,\n                    top: 10,\n                    bottom: 0,\n                    containLabel: true\n                },\n                xAxis: {\n                    show: false\n                },\n                yAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    axisLabel: {\n                        textStyle: {\n                            color: function () {\n                                return (colorMap[0]).color\n                            }\n                        }\n                    },\n                    data: colorMap.map(function (d) {\n                        return d.name;\n                    })\n                },\n                series: [\n                    {\n                        type: 'bar',\n                        barMaxWidth: 20,\n                        itemStyle: {\n                            normal: {\n                                color: function (params) {\n                                    return (colorMap[params.dataIndex]).color\n                                }\n                            }\n                        },\n                        label: {\n                            normal: {\n                                show: true,\n                                position: 'right'\n                            }\n                        },\n                        data: []\n                    }\n                ]\n            });\n\n            // 用echarts绘制左上legendPhone\n            var legendPhone = echarts.init(document.getElementById(\"legendPhone\"));\n            legendPhone.setOption({\n                tooltip: {\n                    trigger: 'item',\n                    formatter: \"{c} ({d}%)\"\n                },\n                series: [\n                    {\n                        type: 'pie',\n                        radius: '55%',\n                        center: ['50%', '60%'],\n                        data: [],\n                        itemStyle: {\n                            emphasis: {\n                                shadowBlur: 10,\n                                shadowOffsetX: 0,\n                                shadowColor: 'rgba(0, 0, 0, 0.5)'\n                            }\n                        }\n                    }\n                ]\n            });\n\n            // 用echart绘制下方时间线\n            var areaStack = echarts.init(document.getElementById(\"area-stack\"));\n            $scope.areas = [];\n            areaStack.setOption({\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        animation: false\n                    }\n                },\n                grid: {//设置图与边缘的距离\n                    left: 0,\n                    right: 35,\n                    bottom: 5,\n                    containLabel: true\n                },\n                dataZoom: [{\n                    show: false,\n                    realtime: true,\n                    start: 0,\n                    end: 100\n                }, {\n                    type: 'inside'\n                }],\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    nameLocation: 'middle',\n                    axisLine: {\n                        lineStyle: {\n                            color: '#aaaaaa'\n                        }\n                    },\n                    axisLabel: {\n                        textStyle: {\n                            color: '#aaaaaa'\n                        }\n                    },\n                    axisTick: {\n                        lineStyle: {\n                            color: '#aaaaaa'\n                        }\n                    },\n                    data: $scope.areas.map(function (item) {\n                        return item.time;\n                    })\n                },\n                yAxis: {\n                    show: false\n                },\n                series: [{\n                    name: 'num',\n                    type: 'line',\n                    lineStyle: {\n                        normal: {\n                            width: 1\n                        }\n                    },\n                    areaStyle: {\n                        normal: {\n                            color: '#aaaaaa'\n                        }\n                    },\n                    symbolSize: 3,\n                    label: {\n                        normal: {\n                            show: true,\n                            position: 'top'\n                        }\n                    },\n                    data: $scope.areas.map(function (item) {\n                        return item.num;\n                    })\n                }]\n            });\n            legendPhone.on('click', function (params) {\n                if (params.componentType === 'series') {\n                    if (params.seriesType === 'pie') {\n                        var params = {\n                            startTime: $scope.viewTime,\n                            endTime: $scope.viewTime + 1800000,\n                            type: $scope.types.indexOf($scope.selectedType) - 1,\n                            phone: params.name\n                        };\n                        visService.getData('/api/content.action', params).then(\n                            function (data) {\n                                $scope.records = data;\n                                $scope.show = true;\n                            },\n                            function (error) {\n                                $scope.error = error;\n                            });\n                    }\n                }\n            });\n            legendType.on('click', function (params) {\n                if (params.componentType === 'series') {\n                    if (params.seriesType === 'bar') {\n                        var type = -1;\n                        colorMap.map(function (d, i) {\n                            if (d.name == params.name) type = i;\n                        });\n\n                        var params = {\n                            startTime: $scope.viewTime,\n                            endTime: $scope.viewTime + 1800000,\n                            type: type\n                        };\n                        visService.getData('/api/content.action', params).then(\n                            function (data) {\n                                $scope.records = data;\n                                $scope.show = true;\n                            },\n                            function (error) {\n                                $scope.error = error;\n                            });\n                    }\n                }\n            });\n            areaStack.on('click', function (params) {\n                if (params.componentType === 'series') {\n                    if (params.seriesType === 'line') {\n                        if (params.dataType === 'edge') {\n                            // 点击到了 graph 的 edge（边）上\n                        }\n                        else {\n                            // 点击到了 graph 的 node（节点）上\n                            var time = new Date(\"2017-02-\" + params.name.substring(0, 2) + \" \" + params.name.substring(3, 8) + \":00\");\n\n                            // 重置content数据\n                            $scope.viewTime = time.getTime() - 1800000;\n                            $scope.show = false;\n                            $scope.records = [];\n\n                            var params = {\n                                startTime: time.getTime() - 1800000,\n                                endTime: time.getTime(),\n                                type: $scope.types.indexOf($scope.selectedType) - 1\n                            };\n                            visService.getData('/api/position.action', params).then(\n                                function (data) {\n                                    // 更新地图数据\n                                    pointSimplifierIns.setData(data.maps);\n\n                                    // 更新时间\n                                    $scope.timeRange = '当前时间：' + $filter('date')(data.area.stime, 'yyyy年M月d日')\n                                        + $filter('date')(data.area.stime, ' HH:mm ')\n                                        + \"至\" + $filter('date')(data.area.etime, ' HH:mm');\n\n                                    // 更新左上legendType数据\n                                    legendType.setOption({\n                                        series: [{\n                                            data: data.bars\n                                        }]\n                                    });\n                                    // 更新左上legendPhone数据\n                                    legendPhone.setOption({\n                                        series: [\n                                            {\n                                                data: data.phone\n                                            }\n                                        ]\n                                    });\n                                },\n                                function (error) {\n                                    $scope.error = error;\n                                });\n                        }\n                    }\n                }\n            });\n\n            $scope.start = function () {\n                $scope.intervalEvent = $interval(function () {\n                    // 自定义时间\n                    if ($scope.startTime !== new Date($scope.currentTime).valueOf()) {\n                        $scope.startTime = new Date($scope.currentTime).valueOf();\n                        // 清除下方时间线数据\n                        $scope.areas = [];\n                        areaStack.setOption({\n                            xAxis: {\n                                data: $scope.areas.map(function (item) {\n                                    return $filter('date')(item.etime, 'd日HH:mm');\n                                })\n                            },\n                            series: [{\n                                data: $scope.areas.map(function (item) {\n                                    return item.num;\n                                })\n                            }]\n                        });\n                    }\n\n                    var params = {\n                        startTime: $scope.startTime,\n                        endTime: $scope.startTime + 1800000,\n                        type: $scope.types.indexOf($scope.selectedType) - 1\n                    };\n                    visService.getData('/api/position.action', params).then(\n                        function (data) {\n                            // 更新地图数据\n                            pointSimplifierIns.setData(data.maps);\n\n                            // 更新时间\n                            $scope.timeRange = '当前时间：' + $filter('date')(data.area.stime, 'yyyy年M月d日')\n                                + $filter('date')(data.area.stime, 'HH:mm')\n                                + \"至\" + $filter('date')(data.area.etime, 'HH:mm');\n\n                            // 更新左上legendType数据\n                            legendType.setOption({\n                                series: [{\n                                    data: data.bars\n                                }]\n                            });\n                            // 更新左上legendPhone数据\n                            legendPhone.setOption({\n                                series: [\n                                    {\n                                        data: data.phone\n                                    }\n                                ]\n                            });\n\n                            // 更新下方时间线数据\n                            $scope.areas.push(data.area);\n                            // if ($scope.areas.length > 24) $scope.areas.shift();\n                            areaStack.setOption({\n                                xAxis: {\n                                    data: $scope.areas.map(function (item) {\n                                        return $filter('date')(item.etime, 'd日HH:mm');\n                                    })\n                                },\n                                series: [{\n                                    data: $scope.areas.map(function (item) {\n                                        return item.num;\n                                    })\n                                }]\n                            });\n                        },\n                        function (error) {\n                            $scope.error = error;\n                        });\n\n                    // 重置content数据\n                    $scope.viewTime = $scope.startTime;\n                    $scope.show = false;\n                    $scope.records = [];\n\n                    $scope.startTime += 1800000;\n                    $scope.currentTime = $filter('date')($scope.startTime, 'yyyy-MM-dd HH:mm:ss');\n\n                }, 10000);\n            };\n\n            $scope.flag = '';\n            $scope.stop = function (flag) {\n                if (flag == 'Pause') {\n                    $interval.cancel($scope.intervalEvent);\n                    $scope.flag = 'Start';\n                } else {\n                    $scope.start($scope.startTime);\n                    $scope.flag = 'Pause';\n\n                    // 重置content数据\n                    $scope.show = false;\n                    $scope.records = [];\n                }\n            };\n        });\n    }]);\nangular.module('chinavis')\n    .controller('analysisController', ['$scope', 'colorMap', 'visService', '$interval', '$filter', function ($scope, colorMap, visService, $interval, $filter) {\n        $scope.months = [\n            {\n                \"name\": \"二月\",\n                \"url\": \"data/M2-30min.json\"\n            },\n            {\n                \"name\": \"三月\",\n                \"url\": \"data/M3-30min.json\"\n            },\n            {\n                \"name\": \"四月\",\n                \"url\": \"data/M4-30min.json\"\n            }\n        ];\n        $scope.currentMonth = \"二月\";\n\n        // 初始展示二月份数据\n        visService.getData($scope.months[0].url, {}).then(\n            function (data) {\n                $scope.data0 = data;\n            },\n            function (error) {\n                $scope.error = error;\n            });\n\n        $scope.show = function (index) {\n            visService.getData($scope.months[index].url, {}).then(\n                function (data) {\n                    $scope.currentMonth = data.name;\n                    if (index === 0) {\n                        $scope.data0 = data;\n                        $scope.data1 = null;\n                        $scope.data2 = null;\n                    } else if (index === 1) {\n                        $scope.data0 = null;\n                        $scope.data1 = data;\n                        $scope.data2 = null;\n                    } else if (index === 2) {\n                        $scope.data0 = null;\n                        $scope.data1 = null;\n                        $scope.data2 = data;\n                    }\n                },\n                function (error) {\n                    $scope.error = error;\n                });\n        }\n    }]);\nangular.module('chinavis')\n    .directive('areaChart', ['$filter', 'colorMap', function ($filter, colorMap) {\n        return {\n            restrict: 'AE',\n            scope: {\n                data: '='\n            },\n            template: '<div></div>',\n            link: function (scope, element) {\n                var chart = element.find('div')[0];\n                chart.style.height = '249px';\n                chart.style.width = '100%';\n\n                var Chart = echarts.init(chart);\n                Chart.setOption({\n                    title: {\n                        text: scope.data.name,\n                        textStyle: {\n                            color: '#aaaaaa',\n                            fontSize: 15\n                        },\n                        top: 15,\n                        left: 40\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'cross',\n                            lineStyle: {\n                                type: 'dashed',\n                                width: 1\n                            },\n                            label: {\n                                backgroundColor: '#6a7985'\n                            }\n                        },\n                        position: {\n                            right: 10,\n                            top: 10\n                        }\n                    },\n                    grid: {\n                        left: '1%',\n                        right: '2%',\n                        bottom: '1%',\n                        containLabel: true\n                    },// 设置图与边缘的距离\n                    dataZoom: [{\n                        show: false,\n                        realtime: true,\n                        start: 0,\n                        end: 50\n                    }, {\n                        type: 'inside'\n                    }],\n                    color: colorMap.map(function (item) {\n                        return item.color\n                    }),// 改变legend的颜色\n                    legend: {\n                        top: 15,\n                        data: colorMap.map(function (item) {\n                            var obj = {};\n                            obj.name = item.name;\n                            obj.textStyle = {color: item.color};\n                            return obj;\n                        })\n                    },\n                    xAxis: {\n                        type: 'category',\n                        boundaryGap: false,\n                        axisLine: {\n                            onZero: true,\n                            lineStyle: {\n                                color: '#aaaaaa'\n                            }\n                        },\n                        axisLabel: {\n                            textStyle: {\n                                color: '#aaaaaa'\n                            }\n                        },\n                        axisTick: {\n                            lineStyle: {\n                                color: '#aaaaaa'\n                            }\n                        },\n                        data: scope.data.value.map(function (item) {\n                            return $filter('date')(item.time, 'M月d日H时mm分');\n                        })\n                    },\n                    yAxis: {\n                        type: 'value',\n                        splitLine: {\n                            show: false\n                        },// 去除网格线\n                        splitArea: {\n                            show: false\n                        },// 保留网格区域\n                        axisLine: {\n                            lineStyle: {\n                                color: '#aaaaaa'\n                            }\n                        },\n                        axisLabel: {\n                            textStyle: {\n                                color: '#aaaaaa'\n                            }\n                        },\n                        axisTick: {\n                            lineStyle: {\n                                color: '#aaaaaa'\n                            }\n                        }\n                    },\n                    series: [\n                        {\n                            name: colorMap[0].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[0].color\n                                }\n                            },\n                            smooth: true,\n                            smoothMonotone: 'x',\n                            symbolSize: 0,\n                            showSymbol: false,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g0 || 0;\n                            })\n                        }, {\n                            name: colorMap[1].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[1].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g1 || 0;\n                            })\n                        }, {\n                            name: colorMap[2].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[2].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g1 || 0;\n                            })\n                        }, {\n                            name: colorMap[3].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[3].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g3 || 0;\n                            })\n                        }, {\n                            name: colorMap[4].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[4].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g4 || 0;\n                            })\n                        }, {\n                            name: colorMap[5].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[5].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g5 || 0;\n                            })\n                        }, {\n                            name: colorMap[6].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[6].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g6 || 0;\n                            })\n                        }, {\n                            name: colorMap[7].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[7].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g7 || 0;\n                            })\n                        }, {\n                            name: colorMap[8].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[8].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g8 || 0;\n                            })\n                        }, {\n                            name: colorMap[9].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[9].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g9 || 0;\n                            })\n                        }, {\n                            name: colorMap[10].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[10].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g10 || 0;\n                            })\n                        }, {\n                            name: colorMap[11].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[11].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g11 || 0;\n                            })\n                        }, {\n                            name: colorMap[12].name,\n                            type: 'line',\n                            stack: '总量',\n                            lineStyle: {\n                                normal: {\n                                    opacity: 0\n                                }\n                            },\n                            areaStyle: {\n                                normal: {\n                                    color: colorMap[12].color\n                                }\n                            },\n                            symbolSize: 3,\n                            hoverAnimation: false,\n                            data: scope.data.value.map(function (item) {\n                                return item.g12 || 0;\n                            })\n                        }]\n                });\n            }\n        }\n    }]);\nangular.module('chinavis')\n    .directive('barChart', ['$filter', 'colorMap', function ($filter, colorMap) {\n        return {\n            restrict: 'AE',\n            scope: {\n                data: '=',\n                type: '='\n            },\n            template: '<div></div>',\n            link: function (scope, element) {\n                var title = ['各时间段伪基站活跃情况', '各类短信数量对比'];\n\n                var chart = element.find('div')[0];\n                chart.style.height = '249px';\n                chart.style.width = '100%';\n\n                var Chart = echarts.init(chart);\n                Chart.setOption({\n                    title: {\n                        text: title[scope.type],\n                        textStyle: {\n                            color: '#aaaaaa',\n                            fontSize: 15\n                        },\n                        top: 15,\n                        left: 40\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {// 坐标轴指示器，坐标轴触发有效\n                            type: 'shadow'// 默认为直线，可选为：'line' | 'shadow'\n                        }\n                    },\n                    grid: {\n                        left: '1%',\n                        right: '2%',\n                        bottom: '1%',\n                        containLabel: true\n                    },// 设置图与边缘的距离\n                    xAxis: [\n                        {\n                            type: 'category',\n                            axisLine: {\n                                onZero: true,\n                                lineStyle: {\n                                    color: '#aaaaaa'\n                                }\n                            },\n                            axisLabel: {\n                                show: true,\n                                interval: 0,\n                                textStyle: {\n                                    color: '#aaaaaa'\n                                }\n                            },\n                            axisTick: {\n                                lineStyle: {\n                                    color: '#aaaaaa'\n                                }\n                            },\n                            data: scope.data.map(function (item) {\n                                if (scope.type === 0) return $filter('date')(item.time, 'HH:mm');\n                                else if (scope.type === 1) return colorMap[item.type].name;\n                            })\n                        }\n                    ],\n                    yAxis: [\n                        {\n                            type: 'value',\n                            splitLine: {\n                                show: false\n                            },// 去除网格线\n                            splitArea: {\n                                show: false\n                            },// 保留网格区域\n                            axisLine: {\n                                lineStyle: {\n                                    color: '#aaaaaa'\n                                }\n                            },\n                            axisLabel: {\n                                textStyle: {\n                                    color: '#aaaaaa'\n                                }\n                            },\n                            axisTick: {\n                                lineStyle: {\n                                    color: '#aaaaaa'\n                                }\n                            }\n                        }\n                    ],\n                    series: [\n                        {\n                            name: '总量',\n                            type: 'bar',\n                            barWidth: '60%',\n                            itemStyle: {\n                                normal: {\n                                    color: function (params) {\n                                        if (scope.type === 0) return '#3398DB';\n                                        else if (scope.type === 1) return (colorMap[params.dataIndex]).color\n                                    }\n                                }\n                            },\n                            data: scope.data.map(function (item) {\n                                return item.num\n                            })\n                        }\n                    ]\n                });\n\n            }\n        }\n    }]);\nangular.module('chinavis')\n    .directive('pieChart', ['$filter', 'colorMap', function ($filter, colorMap) {\n        return {\n            restrict: 'AE',\n            scope: {\n                data: '='\n            },\n            template: '<div></div>',\n            link: function (scope, element) {\n                var pieData = [];\n                // 修改key并添加颜色信息\n                scope.data.second.map(function (item) {\n                    var obj = {};\n                    obj.name = colorMap[item.type].name;\n                    obj.value = item.num;\n                    obj.itemStyle = {\"normal\": {\"color\": colorMap[item.type].color}};\n                    pieData.push(obj);\n                });\n\n                var chart = element.find('div')[0];\n                chart.style.marginTop = '20px';\n                chart.style.height = '500px';\n                chart.style.width = '100%';\n\n                var Chart = echarts.init(chart);\n                Chart.setOption({\n                    title: {\n                        text: '各类短信所占比例',\n                        x: 'center',\n                        bottom: 30,\n                        textStyle: {\n                            color: '#aaaaaa',\n                            fontSize: 15\n                        }\n                    },\n                    grid: {\n                        left: '2%',\n                        right: '2%',\n                        top: '2%',\n                        containLabel: true\n                    },// 设置图与边缘的距离\n                    tooltip: {\n                        trigger: 'item',\n                        formatter: \"{b}: {c} ({d}%)\"\n                    },\n                    series: [\n                        {\n                            type: 'pie',\n                            selectedMode: 'single',\n                            radius: [0, '30%'],\n\n                            label: {\n                                normal: {\n                                    position: 'inner'\n                                }\n                            },\n                            labelLine: {\n                                normal: {\n                                    show: false\n                                }\n                            },\n                            data: scope.data.first\n                        },\n                        {\n                            name: '访问来源',\n                            type: 'pie',\n                            radius: ['40%', '55%'],\n\n                            data: pieData\n                        }\n                    ]\n                });\n\n            }\n        }\n    }]);"]}